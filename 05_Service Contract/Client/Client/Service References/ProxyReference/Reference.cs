//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ProxyReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Rameshkartik/WCFSamples/OnlineShoppingService", ConfigurationName="ProxyReference.OnlineShoppingService")]
    public interface OnlineShoppingService {
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/StockA" +
            "vailability", ReplyAction="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/StockA" +
            "vailabilityResponse")]
        bool StockAvailability(string sModelNumber);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/StockA" +
            "vailability", ReplyAction="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/StockA" +
            "vailabilityResponse")]
        System.Threading.Tasks.Task<bool> StockAvailabilityAsync(string sModelNumber);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/Calcul" +
            "atePrice", ReplyAction="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/Calcul" +
            "atePriceResponse")]
        double CalculatePrice(string sModelNumber, int iQuantity, string sDeliveryLocation);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/Calcul" +
            "atePrice", ReplyAction="http://Rameshkartik/WCFSamples/OnlineShoppingService/OnlineShoppingService/Calcul" +
            "atePriceResponse")]
        System.Threading.Tasks.Task<double> CalculatePriceAsync(string sModelNumber, int iQuantity, string sDeliveryLocation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface OnlineShoppingServiceChannel : Client.ProxyReference.OnlineShoppingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OnlineShoppingServiceClient : System.ServiceModel.ClientBase<Client.ProxyReference.OnlineShoppingService>, Client.ProxyReference.OnlineShoppingService {
        
        public OnlineShoppingServiceClient() {
        }
        
        public OnlineShoppingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OnlineShoppingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OnlineShoppingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OnlineShoppingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool StockAvailability(string sModelNumber) {
            return base.Channel.StockAvailability(sModelNumber);
        }
        
        public System.Threading.Tasks.Task<bool> StockAvailabilityAsync(string sModelNumber) {
            return base.Channel.StockAvailabilityAsync(sModelNumber);
        }
        
        public double CalculatePrice(string sModelNumber, int iQuantity, string sDeliveryLocation) {
            return base.Channel.CalculatePrice(sModelNumber, iQuantity, sDeliveryLocation);
        }
        
        public System.Threading.Tasks.Task<double> CalculatePriceAsync(string sModelNumber, int iQuantity, string sDeliveryLocation) {
            return base.Channel.CalculatePriceAsync(sModelNumber, iQuantity, sDeliveryLocation);
        }
    }
}
